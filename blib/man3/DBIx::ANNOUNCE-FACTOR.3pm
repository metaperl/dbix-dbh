.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ANNOUNCE-FACTOR 3"
.TH ANNOUNCE-FACTOR 3 "2004-11-30" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Refactoring Alzabo's \fI_make_dbh()\fP for Easier DBI Connection Configuration"
.IX Header "Refactoring Alzabo's _make_dbh() for Easier DBI Connection Configuration"
I have factored out the relevant code from
Alzabo::Driver::(MySQL|Postgres)::\fI_make_dbh()\fR. I preserved the usage
of Params::Validate but replaced the use of Exception::Class with
plain Perl die calls. The module is standalone and is called
DBIx::DBH.
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Composing a syntactically valid \s-1DBI\s0 \s-1DSN\s0 is a bit time-consuming and
troublesome. Part of the reason for this is that the syntax varies from
driver to driver. Another reason is that the \s-1DSN\s0 string is compound
data, representing the complex of a minimum of 3 entities. Since 2001,
3 modules have entered \s-1CPAN\s0 with the sole and express intent to store
\&\s-1DBI\s0 database connection information and use this information to
provide \s-1DBI\s0 database handles with ease. However, none of these modules
assemble the components of the \s-1DSN\s0 string into a \s-1DSN\s0 string \-\-\- they
all expect completely perfect \s-1DSN\s0 strings, a non-trivial task.
.PP
Recently, I noticed that Alzabo's polymorphic \fI_make_dbh()\fR method could
assemble syntactically correct \s-1DSN\s0 strings from simple-to-supply
scalar data items for both Postgres and MySQL. In other words, instead
of having to provide a well-formed \s-1DSN\s0 string like this:
.PP
.Vb 1
\& dbi:mysql:database=mysqldb;host=rt.tg.allswell.com;port=3312;mysql_local_infile=1
.Ve
.PP
we leave the hard work to _make_dbh by calling it like this
.PP
.Vb 8
\& $s\->_make_dbh(
\&   name => \*(Aqmysqldb\*(Aq, 
\&   host => \*(Aqrt.tg.allswell.com\*(Aq, 
\&   port => 3312,
\&   user => \*(Aqcarlos\*(Aq,
\&   pass => \*(Aqsantana\*(Aq,
\&   mysql_local_infile => 1
\& );
.Ve
.PP
The \f(CW\*(C`_make_dbh()\*(C'\fR usage is much easier to read. And much easier to
create directly from \s-1HTTP\s0 form data or configuration files. No doubt
everyone has their pet \fI_make_dbh()\fR in the tech stack at their
company.
.SH "The refactoring"
.IX Header "The refactoring"
The module DBIx::DBH represents my refactoring of Dave's code. The
hash elements have slightly different naming:
.IP "\(bu" 4
the database driver must be supplied
.Sp
The \f(CW\*(C`driver\*(C'\fR key is used to supply the database
.IP "\(bu" 4
the name key is dbname
.IP "\(bu" 4
the pass key is passed
.PP
Another difference is that \fI_make_dbh()\fR called \f(CW\*(C`DBI\-\*(C'\fR\fIconnect()\fR> with a
fixed set of \s-1DBI\s0 attributes. The refactoring allows for any attributes
to be used, both from \s-1DBI\s0 and from the driver's driver.
.SH "Database Connection Modules, Past and Present"
.IX Header "Database Connection Modules, Past and Present"
The very first module on \s-1CPAN\s0 for database connection may have been
\&\f(CW\*(C`DBIx::Password\*(C'\fR by Brian Aker.  I sent him patches so he could
return a hash of data or array of data for use with supra-DBI tools
like Alzabo and DBix::AnyDBD but he refused them. Ima::DBI
was also available around this time, but it simply slipped my mind.
.PP
So in 2002, I created DBIx::Connect, a Perl module which would 
use AppConfig configuration files to provide either \s-1DBI\s0 database handles
or a data structure with connection information. This was nice because I could
flit from database tool to database tool but only have to catalog my
connection information once.
.PP
However, DBIx::Connect was based on AppConfig, which was proving itself
hard to use \- it was not easy to have global data and overwrite it
in sub-blocks. I noted these shortcomings here:
.PP
.Vb 1
\&   http://perlmonks.org/?node_id=299749
.Ve
.PP
and based on suggestions rewrote DBIx::Connect from the bottom up using
Sam Tregar's excellent Config::ApacheFormat. Now, I could do
anything with config files that you could do with an Apache one. Also, 
I had much better validation of the config file.
.PP
Config::DBI is \s-1OK\s0 except for two things
.IP "1  \s-1DSN\s0 strings are entered as one composite value." 4
.IX Item "1  DSN strings are entered as one composite value."
When using an Apache-like configuration file, one thing you find
immensely useful is the ability to build up your data in layers,
inheriting and over-writing values as necessary.
.Sp
It is difficult to create such an inheritance hiearchy
describing each database when the \s-1DSN\s0 is specified as a string.
.IP "2 Config::DBI has rigid expectations of the config file" 4
.IX Item "2 Config::DBI has rigid expectations of the config file"
Software organizations should be entitled to develop configuration
files in any manner they desire. Config::DBI expects the file to have
a certain structure which may not accord with how the organization
wants to describe their database setup
.PP
The way around both of these problems was handled by Alzabo's
\&\fImake_dbh()\fR function a long time ago. To handle item 1, you simply run
through the hash, looking for keys that can be used in the \s-1DSN\s0 and
assemble them into the \s-1DSN\s0 string. To handle item 2, you simply expect
a hash whose keys are limited to the values in the \s-1DBI\s0 and driver
documentation. How a particular software organization transforms their
internal configuration information to this generic hash is their concern.
