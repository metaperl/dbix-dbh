.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::DBH 3"
.TH DBIx::DBH 3 "2006-03-08" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& DBIx::DBH \- Perl extension for simplifying database connections
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use DBIx::DBH;
\&
\& my %opt = (tty => 1) ;
\& my %dat = ( 
\&     driver => \*(AqPg\*(Aq,
\&     dbname => \*(Aqdb_terry\*(Aq,
\&     user => \*(Aqterry\*(Aq,
\&     password => \*(Aqmarkso\*(Aq
\& );
\&
\& my $dbh = DBIx::DBH\->connect(%dat, %opt) ;
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
DBIx::DBH is designed to facilitate and validate the process of creating 
\&\s-1DBI\s0 database connections.
It's chief and unique contribution to this set of modules on \s-1CPAN\s0 is that
it forms the \s-1DSN\s0 string for you, regardless of database driver. Another thing 
about this module is that
it takes a flat Perl hash 
as input, making it ideal for converting \s-1HTTP\s0 form data 
and or config file information into \s-1DBI\s0 database handles. It also can form
\&\s-1DSN\s0 strings for both major free databases and is subclassed to support
extension for other databases.
.PP
DBIx::DBH provides rigorous validation on the input parameters via
Params::Validate. It does not
allow parameters which are not defined by the \s-1DBI\s0 or the database driver
driver into the hash.
.PP
I provides support for MySQL, Postgres and Sybase (thanks to Rachel Richard 
for the Sybase support).
.SH "DBIx::DBH API"
.IX Header "DBIx::DBH API"
.ie n .SS "$dbh = connect(%params)"
.el .SS "\f(CW$dbh\fP = connect(%params)"
.IX Subsection "$dbh = connect(%params)"
\&\f(CW%params\fR requires the following as keys:
.IP "\(bu" 4
driver : the value matches /\ea(mysql|Pg)\eZ/ (case-sensitive).
.IP "\(bu" 4
dbname : the value is the name of the database to connect to
.PP
\&\f(CW%params\fR can have the following optional parameters
.IP "\(bu" 4
user
.IP "\(bu" 4
password
.IP "\(bu" 4
host
.IP "\(bu" 4
port
.PP
\&\f(CW%params\fR can also have parameters specific to a particular database
driver. See
DBIx::DBH::Sybase,
DBIx::DBH::mysql and DBIx::DBH::Pg for additional parameters
acceptable based on database driver.
.ie n .SS "($dsn, $user, $pass, $attr) = connect_data(%params)"
.el .SS "($dsn, \f(CW$user\fP, \f(CW$pass\fP, \f(CW$attr\fP) = connect_data(%params)"
.IX Subsection "($dsn, $user, $pass, $attr) = connect_data(%params)"
\&\f(CW\*(C`connect_data\*(C'\fR takes the same arguments as \f(CW\*(C`connect()\*(C'\fR but returns
a list of the 4 arguments required by the \s-1DBI\s0 \f(CW\*(C`connect()\*(C'\fR
function. This is useful for working with modules that have an
alternative connection syntax such as DBIx::AnyDBD or 
Alzabo.
.ie n .SS "($dsn, $user, $pass, $attr) = connect_data(%params)"
.el .SS "($dsn, \f(CW$user\fP, \f(CW$pass\fP, \f(CW$attr\fP) = connect_data(%params)"
.IX Subsection "($dsn, $user, $pass, $attr) = connect_data(%params)"
\&\f(CW\*(C`connect_data\*(C'\fR takes the same arguments as \f(CW\*(C`connect()\*(C'\fR but returns
a list of the 4 arguments required by the \s-1DBI\s0 \f(CW\*(C`connect()\*(C'\fR
function. This is useful for working with modules that have an
alternative connection syntax such as DBIx::AnyDBD or 
Alzabo.
.ie n .SS "$dsn = form_dsn(%params)"
.el .SS "\f(CW$dsn\fP = form_dsn(%params)"
.IX Subsection "$dsn = form_dsn(%params)"
\&\f(CW\*(C`form_dsn\*(C'\fR takes the same arguments as \f(CW\*(C`connect()\*(C'\fR but returns
only the properly formatted \s-1DSN\s0 string. This is also 
useful for working with modules that have an
alternative connection syntax such as DBIx::AnyDBD or 
Alzabo.
.SH "ADDING A DRIVER"
.IX Header "ADDING A DRIVER"
Simply add a new driver with a name of \f(CW\*(C`DBIx::DBH::$Driver\*(C'\fR, where
\&\f(CW$Driver\fR is a valid \s-1DBI\s0 driver name.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Config::DBI
.IP "\(bu" 4
DBIx::Connect
.IP "\(bu" 4
DBIx::Password
.IP "\(bu" 4
Ima::DBI
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
expose parm validation info:
.Sp
.Vb 8
\& > 
\& > It would be nice if the parameter validation info was exposed in some 
\& > way, so that an interactive piece of software can ask a user which 
\& > driver they want, then query your module for a list of supported 
\& > parameters, then ask the user to fill them in. (Perhaps move the hash 
\& > of validation parameters to a new method named valid_params, and then 
\& > have connect_data call that method and pass the return value to 
\& > validate?)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Terrence Brannon, <bauhaus@metaperl.com>
.PP
Sybase support contributed by Rachel Richard.
.PP
Mark Stosberg did all of the following:
.IP "\(bu" 4
contributed Sqlite support
.IP "\(bu" 4
fixed a documentation bug
.IP "\(bu" 4
made DBIx::DBH more scaleable
.Sp
Says Mark: "Just as \s-1DBI\s0 needs no modifications for a new driver to work,
neither should this module.
.Sp
I've attached a patch which refactors the code to address this.
.Sp
Rather than relying on a hardcoded list, it tries to 'require' the
driver, or dies with a related error message.
.Sp
This could lower your own maintenance effort, as others can publish
additional drivers directly without requiring a new release of
DBIx::DBH for it to work."
.Sp
<http://rt.cpan.org/Ticket/Display.html?id=18026>
.PP
Substantial suggestions by M. Simon Ryan Cavaletto.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2004 by Terrence Brannon
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 224:" 4
.IX Item "Around line 224:"
=back without =over
.IP "Around line 257:" 4
.IX Item "Around line 257:"
You forgot a '=back' before '=head1'
